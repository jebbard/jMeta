<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.github.jmeta</groupId>
	<artifactId>jmetaparent</artifactId>
	<version>0.1</version>
	<packaging>pom</packaging>
	<name>jMetaParent</name>
	<url>http://maven.apache.org</url>

	<!-- ========================== Dependencies ========================== -->
	<!-- Global dependencies for reuse in all child projects -->
	<dependencyManagement>
		<dependencies>
			<!-- (1) jMeta Productive Dependencies -->
			<dependency>
				<groupId>com.github.jmeta</groupId>
				<artifactId>jmetalibrary</artifactId>
				<version>0.1</version>
				<scope>compile</scope>
			</dependency>
			<dependency>
				<groupId>com.github.jmeta</groupId>
				<artifactId>jmetautility</artifactId>
				<version>0.1</version>
				<scope>compile</scope>
			</dependency>
			<dependency>
				<groupId>com.github.jmeta</groupId>
				<artifactId>jmetaAPEv2</artifactId>
				<version>0.1</version>
				<scope>compile</scope>
			</dependency>
			<dependency>
				<groupId>com.github.jmeta</groupId>
				<artifactId>jmetaID3v1</artifactId>
				<version>0.1</version>
				<scope>compile</scope>
			</dependency>
			<dependency>
				<groupId>com.github.jmeta</groupId>
				<artifactId>jmetaID3v23</artifactId>
				<version>0.1</version>
				<scope>compile</scope>
			</dependency>
			<dependency>
				<groupId>com.github.jmeta</groupId>
				<artifactId>jmetaLyrics3v2</artifactId>
				<version>0.1</version>
				<scope>compile</scope>
			</dependency>
			<dependency>
				<groupId>com.github.jmeta</groupId>
				<artifactId>jmetaMP3</artifactId>
				<version>0.1</version>
				<scope>compile</scope>
			</dependency>
			<dependency>
				<groupId>com.github.jmeta</groupId>
				<artifactId>jmetaOGG</artifactId>
				<version>0.1</version>
				<scope>compile</scope>
			</dependency>
			<!-- (2) jMeta Test Dependencies -->
			<dependency>
				<groupId>com.github.jmeta</groupId>
				<artifactId>jmetalibrary</artifactId>
				<version>0.1</version>
				<type>test-jar</type>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>com.github.jmeta</groupId>
				<artifactId>jmetautility</artifactId>
				<version>0.1</version>
				<type>test-jar</type>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>com.github.jmeta</groupId>
				<artifactId>jmetaAPEv2</artifactId>
				<version>0.1</version>
				<type>test-jar</type>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>com.github.jmeta</groupId>
				<artifactId>jmetaID3v1</artifactId>
				<version>0.1</version>
				<type>test-jar</type>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>com.github.jmeta</groupId>
				<artifactId>jmetaID3v23</artifactId>
				<version>0.1</version>
				<type>test-jar</type>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>com.github.jmeta</groupId>
				<artifactId>jmetaLyrics3v2</artifactId>
				<version>0.1</version>
				<type>test-jar</type>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>com.github.jmeta</groupId>
				<artifactId>jmetaMP3</artifactId>
				<version>0.1</version>
				<type>test-jar</type>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>com.github.jmeta</groupId>
				<artifactId>jmetaOGG</artifactId>
				<version>0.1</version>
				<type>test-jar</type>
				<scope>test</scope>
			</dependency>
			<!-- (4) Test library dependencies -->
			<dependency>
				<groupId>org.mockito</groupId>
				<artifactId>mockito-core</artifactId>
				<version>2.11.0</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>junit</groupId>
				<artifactId>junit</artifactId>
				<version>4.12</version>
				<scope>test</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>
		<!-- (3) Logging Provider -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>1.7.21</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-core</artifactId>
			<version>2.10.0</version>
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-slf4j-impl</artifactId>
			<version>2.10.0</version>
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-1.2-api</artifactId>
			<version>2.10.0</version>
		</dependency>
		<!-- NOTE: Strange build problem with logback: Test sources do not find 
			productive symbols of the same module during test-compile if using logback! -->
		<!-- <dependency> -->
		<!-- <groupId>ch.qos.logback</groupId> -->
		<!-- <artifactId>logback-classic</artifactId> -->
		<!-- <version>1.1.7</version> -->
		<!-- <scope>compile</scope> -->
		<!-- </dependency> -->
	</dependencies>


	<!-- ========================== Modules for Build ========================== -->
	<!-- Lists all folders (using relative paths) that contain POMs that have 
		to be build. Order is not of importance, Maven ensures projects required 
		by other projects are build first. -->
	<modules>
		<module>../jMetaLibrary</module>
		<module>../jMetaDefaultExtensionID3v1</module>
		<module>../jMetaDefaultExtensionID3v23</module>
		<module>../jMetaDefaultExtensionLyrics3v2</module>
		<module>../jMetaDefaultExtensionAPEv2</module>
		<module>../jMetaDefaultExtensionOGG</module>
		<module>../jMetaDefaultExtensionMP3</module>
		<module>../jMetaDefaultExtensionIntegrationTests</module>
		<module>../jMetaUtility</module>
		<module>../jMetaTools</module>
	</modules>


	<!-- ========================== Build ========================== -->
	<!-- Global build settings -->
	<build>
		<plugins>
			<!-- COMPILER -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>2.3.2</version>
				<configuration>
					<!-- Java compiler and runtime version -->
					<source>9</source>
					<target>9</target>
				</configuration>
			</plugin>
			<!-- JAR: Build a test jar for test reuse -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>2.2</version>
				<executions>
					<execution>
						<goals>
							<goal>test-jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!-- Code coverage -->
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>0.7.9</version>
				<executions>
					<execution>
						<id>default-prepare-agent</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
					</execution>
					<execution>
						<id>default-report</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>report</goal>
						</goals>
					</execution>
					<execution>
						<id>default-check</id>
						<goals>
							<goal>check</goal>
						</goals>
						<configuration>
							<haltOnFailure>false</haltOnFailure>
							<rules>
								<rule implementation="org.jacoco.maven.RuleConfiguration">
									<element>BUNDLE</element>
									<limits>
										<limit implementation="org.jacoco.report.check.Limit">
											<counter>COMPLEXITY</counter>
											<value>COVEREDRATIO</value>
											<minimum>0.60</minimum>
										</limit>
									</limits>
								</rule>
							</rules>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- Ensure that a source jar is created additionally -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-source-plugin</artifactId>
				<version>3.0.0</version>
				<executions>
					<execution>
						<id>attach-sources</id>
						<phase>verify</phase>
						<goals>
							<goal>jar-no-fork</goal>
							<goal>test-jar-no-fork</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>

		<pluginManagement>
			<plugins>
				<!--This plugin's configuration is used to store Eclipse m2e settings 
					only. It has no influence on the Maven build itself. -->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.jacoco</groupId>
										<artifactId>
											jacoco-maven-plugin
										</artifactId>
										<versionRange>
											[0.7.9,)
										</versionRange>
										<goals>
											<goal>prepare-agent</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

	<!-- ========================== Reporting ========================== -->
	<reporting>
		<plugins>
			<!-- TEST: For test result generation in sites -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-report-plugin</artifactId>
				<version>2.17</version>
			</plugin>

			<!-- JAVADOC: For javadoc generation in sites -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>2.9.1</version>
				<configuration>
					<author>true</author>
					<breakiterator>true</breakiterator>
					<version>true</version>
					<debug>true</debug>
					<verbose>true</verbose>
					<show>private</show>
					<!-- NOTE: Inheriting projects only need to add the <subpackages> tag 
						here to enable javadoc generation for the given packages. All other configurations 
						can be skipped. -->
				</configuration>
			</plugin>
		</plugins>
	</reporting>
</project>
