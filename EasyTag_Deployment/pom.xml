<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>de.je.jmeta</groupId>
  <artifactId>jMetaBuild</artifactId>
  <version>0.2-SNAPSHOT</version>
  <packaging>pom</packaging>
  <name>jMetaBuild</name>
  <url>www.jeXYZ211183.de</url>
  
  
  <!-- ========================== 
  		Properties
       ========================== -->
  <!-- Some user-defined properties - Can be adjusted to current environment and changed paths -->
  <properties>
     <JDK7.home>E:\Programmieren\01_Java\01_JDKs\java7</JDK7.home>
     <JDK6.home>E:\Programmieren\01_Java\01_JDKs\java6_0_25</JDK6.home>
     <JDK8.home>E:\Programmieren\01_Java\01_JDKs\jdk1.8.0_25</JDK8.home>
     <ydoc.home>E:\Programmieren\Tools\yworks-uml-doclet-3.0_02-jdk1.5</ydoc.home>
     <!-- Relative path to utility libraries, starting from this POM's location -->
     <utils.relpath>../../../01_General/02_Libraries/JavaUtils/</utils.relpath>
     <!-- Relative path to this POM, starting from the utility library workspace location
     	  Should be used in child POMs <parent><relativePath>
     	  
     	  using this property in module child projects DOES NOT WORK if Maven repository is empty 
     	  
     <utils.relpath.parentPom>../../../../02_CurrentProjects/EasyTag/EasyTag_Deployment/pom.xml</utils.relpath.parentPom>
      -->
  </properties>
  
  
  <!-- ========================== 
  		Dependencies
       ========================== -->
  <!-- Global dependencies for reuse in all child projects -->
  <dependencyManagement>
  	<dependencies>
	    <dependency>
	      <groupId>junit</groupId>
	      <artifactId>junit</artifactId>
	      <version>4.8.2</version>
	      <scope>test</scope>
	    </dependency>
    </dependencies>
  </dependencyManagement>
  
  
  <!-- ========================== 
  		Modules for Build
       ========================== -->
  <!-- Lists all folders (using relative paths)
       that contain POMs that have to be build.
 	   Order is not of importance, Maven ensures projects
 	   required by other projects are build first.-->
  <modules>
    <module>../EasyTagCore</module>
    <module>../EasyTagExt_DefaultBundle</module>
    <module>../ExtManager_Test_Impl</module>
  </modules>

  
  <!-- ========================== 
  		Build
       ========================== -->
  <!-- Global build settings -->
  <build>
	<plugins>
		<!-- COMPILER -->
	    <plugin>
	        <groupId>org.apache.maven.plugins</groupId>
	        <artifactId>maven-compiler-plugin</artifactId>
	        <version>2.3.2</version>
	        <configuration>
	        	<!-- Java compiler and runtime version -->
	            <source>1.8</source>
          		<target>1.8</target>
	         </configuration>
   		</plugin>
   		<plugin>
			<groupId>org.jacoco</groupId>
			<artifactId>jacoco-maven-plugin</artifactId>
			<version>0.7.2.201409121644</version>
			<executions>
				<execution>
					<id>default-prepare-agent</id>
					<goals>
						<goal>prepare-agent</goal>
					</goals>
				</execution>
				<execution>
					<id>default-report</id>
					<phase>prepare-package</phase>
					<goals>
						<goal>report</goal>
					</goals>
				</execution>
				<execution>
					<id>default-check</id>
					<goals>
						<goal>check</goal>
					</goals>
					<configuration>
						<haltOnFailure>false</haltOnFailure>
						<rules>
							<rule implementation="org.jacoco.maven.RuleConfiguration">
								<element>BUNDLE</element>
								<limits>
									<limit implementation="org.jacoco.report.check.Limit">
										<counter>COMPLEXITY</counter>
										<value>COVEREDRATIO</value>
										<minimum>0.60</minimum>
									</limit>
								</limits>
							</rule>
						</rules>
					</configuration>
				</execution>
			</executions>
		</plugin>
    </plugins>
	<pluginManagement>
		<plugins>
			<!--This plugin's configuration is used to store Eclipse m2e settings only. It has no influence on the Maven build itself.-->
			<plugin>
				<groupId>org.eclipse.m2e</groupId>
				<artifactId>lifecycle-mapping</artifactId>
				<version>1.0.0</version>
				<configuration>
					<lifecycleMappingMetadata>
						<pluginExecutions>
							<pluginExecution>
								<pluginExecutionFilter>
									<groupId>org.jacoco</groupId>
									<artifactId>
										jacoco-maven-plugin
									</artifactId>
									<versionRange>
										[0.7.2.201409121644,)
									</versionRange>
									<goals>
										<goal>prepare-agent</goal>
									</goals>
								</pluginExecutionFilter>
								<action>
									<ignore></ignore>
								</action>
							</pluginExecution>
						</pluginExecutions>
					</lifecycleMappingMetadata>
				</configuration>
			</plugin>
		</plugins>
	</pluginManagement>
  </build>
 
  <!-- ========================== 
  		Reporting
       ========================== -->
  <reporting>
	<plugins>
		<!-- TEST: For test result generation in sites -->
		<plugin>
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-surefire-report-plugin</artifactId>
			<version>2.17</version>
		</plugin>
     		
		<!-- JAVADOC: For javadoc generation in sites -->
		<plugin>
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-javadoc-plugin</artifactId>
			<version>2.9.1</version>
			<configuration>
				<author>true</author>
				<breakiterator>true</breakiterator>
				<version>true</version>
				<debug>true</debug>
				<verbose>true</verbose>
				<show>private</show>
				<additionalparam>-umlautogen</additionalparam>
<!--  Can be uncommented to use Java 6 stylesheet for javadoc. Note that javadoc might issue warnings if Java 7 and above language features are used. -->
<!-- 				<javadocExecutable>
						${JDK6.home}/bin
					</javadocExecutable> -->
				<doclet>ydoc.doclets.YStandard</doclet>
				<docletPath>${ydoc.home}/lib/ydoc.jar:${ydoc.home}/resources</docletPath>
				
<!-- NOTE: Inheriting projects only need to add the <subpackages> tag here to enable javadoc generation for the given packages. All other configurations can be skipped. -->
				
				<tagletArtifact>
				  <groupId>de.je.util.docs</groupId>
				  <artifactId>PrePostJavadoc</artifactId>
				  <version>1.0-SNAPSHOT</version>
				</tagletArtifact>
				<taglets>
 				  <taglet>
				    <tagletClass>de.je.util.docs.taglet.PreTaglet</tagletClass>
				  </taglet> 
 				  <taglet>
				    <tagletClass>de.je.util.docs.taglet.PostTaglet</tagletClass>
				  </taglet>
				</taglets>
				<tags>
					<tag>
						<name>params</name>
					</tag>
					<tag>
						<name>pre</name>
					</tag>
					<tag>
						<name>post</name>
					</tag>
					<tag>
						<name>return</name>
					</tag>
					<tag>
						<name>throws</name>
					</tag>
				</tags>
			</configuration>
		 </plugin>
	</plugins>
  </reporting>
</project>
